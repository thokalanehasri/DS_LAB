#include<stdio.h>
#include<stdlib.h>

struct node{
    int data;
    struct node * link;
};
struct node * head = NULL,*cur,*temp,*temp1;

struct node * create(){
   int n;
   printf("Enter the total number of nodes\n");
   scanf("%d",&n);
   while(n--){
      cur = (struct node*)malloc(sizeof(struct node));
      printf("enter the value to be inserted in the node\n");
      scanf("%d",&(cur->data));
      cur->link = NULL;

      if(head == NULL)
           head = cur;
      else{
         temp = head;
         while(temp -> link != NULL)
              temp = temp -> link;
         temp -> link = cur;
      }
   }
   return head;
}

struct node * insert_begin(int ele){
    cur = (struct node*)malloc(sizeof(struct node));
    cur -> data = ele;
    cur -> link = head;
    head = cur;
    return head;
}

struct node * insert_end(int ele){
    cur = (struct node *)malloc(sizeof(struct node));
    cur -> data = ele;
    cur -> link = NULL;
    temp = head;
    while(temp->link != NULL)
         temp = temp->link;
    temp->link = cur;
    return head;
}
struct node *insert_pos(int ele, int pos){
    int c=1;
    cur = (struct node *)malloc(sizeof(struct node));
    cur->data=ele;
    temp = head;
    while(c<pos-1){
       temp = temp->link;
       c++;
    }
    cur->link = temp->link;
    temp->link = cur;
    return head;
}


void display(struct node *head){
     temp = head;
     while(temp->link != NULL){
         printf("%d -> ",(temp->data));
         temp = temp->link;
     }
     printf("%d\n",(temp->data));
} 

struct node* delete_begin(struct node *head){
     temp = head;
     head = temp->link;
     printf("deleted element is:%d\n",temp->data);
     free(temp);
     return head;
}

struct node * delete_end(struct node*head){
     temp = head;
     while(temp->link != NULL){
              temp1 = temp;
              temp = temp->link;
     }
     temp1->link = NULL;
     printf("deleted element is:%d\n",temp->data);
     free(temp);
     return head;
}

struct node *delete_pos(struct node *head,int pos){
     temp = head;
     int c=1;
     while(c<pos){
        temp1 = temp;
        temp = temp->link;
        c++;
     }
     temp1->link = temp->link;
     printf("deleted element %d\n",temp->data);
     free(temp);

     return head;
}
void reversedisplay(struct node*head){
    if(head != NULL){
        reversedisplay(head->link);
        printf("%d ",head->data);
    }
}

int search(struct node *head,int key){
    int c =1;
    temp = head;
    while(temp != NULL){
        if(key == temp->data){
            return c;
        }
        temp =temp->link;
        c++;
    }
    return -1;
}

struct node* sorting(struct node *head){
    int x,i,s;
    temp = head;
    temp1 = NULL;
    while(s){
        s=0;
        temp = head;
        while(temp->link!=temp1){
            if((temp->data) > (temp->link->data)){
                x = temp->data;
                temp->data = temp->link->data;
                temp->link->data = x;
                s = 1;
            }
            temp = temp->link;
        }
        temp1 = temp;
    } 
    
    return head;
}    
    /*while(temp != NULL){
        temp1 = NULL;
        
        
        while(temp1 != NULL){
            if(temp1 ->data  >  temp1->link->data){
                x = temp1->data;
                temp1->data  =  temp1->link->data;
                temp1->link->data  =  x;
            }
            temp1=temp1->link;
        }
        temp = temp->link;
    }*/
   

int main(){
    struct node * head;    
    int ele,ch,pos,key;
    while(1){
       printf("\n1-create()\n 2-insert at begin\n 3-insert at end\n 4- insert at pos\n 5-display \n 6-delete at begin \n 7-delete at end \n 8-delete at pos \n 9-reverse display\n 10-search\n 11-sort\n 12-exit \n");
       printf("enter your choise\n");
       scanf("%d",&ch);
       switch(ch){
            case 1: head = create();
                    break;
            case 2: printf("enter the value to be inserted\n");
                    scanf("%d",&ele);
                    head = insert_begin(ele);
                    break;
            case 3: printf("enter the value to be inserted\n");
                    scanf("%d",&ele);
                    head = insert_end(ele);
                    break;
            case 4: printf("enter the value and position\n ");
                    scanf("%d %d",&ele,&pos);
                    head = insert_pos(ele,pos);
                    break;
            case 5: display(head);
                    break;
            case 6: head = delete_begin(head);
                    break;
            case 7: head = delete_end(head);
                    break;
            case 8: printf("enter the position\n");
                    scanf("%d",&pos);
                    head = delete_pos(head,pos);
                    break;  
            case 9: reversedisplay(head);
                    break;
            case 10:printf("enter the key value to be searched\n");
                    scanf("%d",&key);
                    pos = search(head,key);
                    if(pos == -1)
                        printf("element not found\n");
                    else
                        printf("element found at %d \n",pos);
                    break;
            case 11: head = sorting(head);
                     break;
                    
            case 12: exit(0);
            
       }
   }             
}



output:
 case 6:
  1 -> 2 -> 3 -> 4 -> 5
  
  enter your choise
  6
  deleted element is:1
  enter your choise
  5
  2 -> 3 -> 4 -> 5

case 7:
  enter your choise
  7
  deleted element is:5
  enter your choise
  5
  2 -> 3 -> 4
  
case 8:
     enter your choise
     8
    enter the position
    2
    deleted element 3
    enter your choise
    5
    2 -> 4
    
case 9:
     enter your choise
     9
     4 2 
     
case 10:
     enter your choise
     10
     enter the key value to be searched
     4
     element found at 2 
    
case 11:
     enter your choise
     5
     3 -> 9 -> 2 -> 5 -> 1 -> 7
     enter your choise
     11
     enter your choise
     5
     1 -> 2 -> 3 -> 5 -> 7 -> 9
